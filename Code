from tkinter import *
from math import sqrt, pi, log, factorial
def calculate(expression):
    try:
        expression = expression.replace('π', str(pi))
        if '√' in expression:
            value = float(expression.split('√')[1].strip())
            return sqrt(value)    
        if 'log' in expression:
            value = float(expression.split('log')[1].strip())
            return log(value)      
        if '!' in expression:
            value = int(expression.split('!')[0].strip())
            return factorial(value)      
        if '%' in expression:
            parts = expression.split('%')
            value1 = float(parts[0].strip())
            value2 = float(parts[1].strip())
            return value1 % value2      
        if 'cm to in' in expression:
            value = float(expression.split('cm to in')[0].strip())
            return f"{value / 2.54} inches"       
        if 'm to cm' in expression:
            value = float(expression.split('m to cm')[0].strip())
            return f"{value * 100} cm"   
        if 'cm to feet' in expression:
            value = float(expression.split('cm to feet')[0].strip())
            return f"{value / 30.48} feet"  
        if '°F' in expression:
            value = float(expression.split('°F')[0].strip())
            return f"{(value - 32) * 5 / 9} °C"    
        return eval(expression)   
    except Exception as e:
        return f"Error: {e}"

def iExit():
    root.destroy()
    return

def on_button_click(value):
    current = display.get()
    if value == "=":
        result = calculate(current)
        display.delete(0, END)
        display.insert(END, result)
    elif value == "C":
        display.delete(0, END)
    else:
        display.insert(END, value)


def switch_to_standard():
    
    standard_buttons = [
        ('7', 1, 0, 'lightblue'), ('8', 1, 1, 'lightblue'), ('9', 1, 2, 'lightblue'), ('/', 5, 0, 'orange'),
        ('4', 2, 0, 'lightblue'), ('5', 2, 1, 'lightblue'), ('6', 2, 2, 'lightblue'), ('*', 2, 3, 'orange'),
        ('1', 3, 0, 'lightblue'), ('2', 3, 1, 'lightblue'), ('3', 3, 2, 'lightblue'), ('-', 3, 3, 'orange'),
        ('0', 4, 0, 'lightblue'), ('.', 4, 1, 'lightblue'), ('+', 4, 2, 'orange'), ('=', 4, 3, 'lightgreen'),
        ('C', 1, 3, 'lightpink'), ('%', 5, 1, 'orange')
    ]
    create_buttons(standard_buttons)


def switch_to_scientific():
    
    scientific_buttons = [
        ('7', 1, 0, 'lightblue'), ('8', 1, 1, 'lightblue'), ('9', 1, 2, 'lightblue'), ('/', 5, 0, 'orange'),
        ('4', 2, 0, 'lightblue'), ('5', 2, 1, 'lightblue'), ('6', 2, 2, 'lightblue'), ('*', 2, 3, 'orange'),
        ('1', 3, 0, 'lightblue'), ('2', 3, 1, 'lightblue'), ('3', 3, 2, 'lightblue'), ('-', 3, 3, 'orange'),
        ('0', 4, 0, 'lightblue'), ('.', 4, 1, 'lightblue'), ('+', 4, 2, 'orange'), ('=', 4, 3, 'lightgreen'),
        ('C', 1, 3, 'lightpink'), ('√', 5, 1, 'orange'), ('π', 5, 2, 'orange'), ('log', 5, 3, 'orange'),
        ('!', 6, 0, 'orange'), ('cm to in', 6, 1, 'orange'), ('m to cm', 6, 2, 'orange'), ('cm to feet', 6, 3, 'orange'),
        ('%', 7, 0, 'orange'), ('°F', 7, 1, 'orange'),
    ]
    create_buttons(scientific_buttons)


def btn_clear(self):
        self.expression = ""
        self.input_text.set("")

def create_buttons(buttons):
    for (text, row, col, color) in buttons:
        Button(root, text=text, width=8, height=2, font=("Arial", 14), bg=color, fg="black", command=lambda t=text: on_button_click(t)).grid(row=row, column=col, padx=5, pady=5)
root = Tk()
root.title("Calculator")
root.geometry("450x600")
root.configure(bg="black")
menu_bar = Menu(root)
mode_menu = Menu(menu_bar, tearoff=0)
menu_bar.add_cascade(label="File", menu=mode_menu)
mode_menu.add_command(label="Standard", command=switch_to_standard)
mode_menu.add_command(label="Scientific", command=switch_to_scientific)
mode_menu.add_command(label="Exit", command=iExit)

root.config(menu=menu_bar)
display = Entry(root, font=("Arial", 16), borderwidth=2, bg="white", fg="black")
display.grid(row=0, column=0, columnspan=4, padx=10, pady=10)
switch_to_standard()  
root.mainloop()
